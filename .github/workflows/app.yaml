name: App

on:
  push:
    branches: [main]
  
  workflow_dispatch:
  
env:
  STORAGE_NAME: ''

jobs:
  

  build-test:
    name: 'Build and Test'
    runs-on: 'ubuntu-latest'
    environment: test

    steps:
      - uses: actions/checkout@v2
      
      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ~/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Setup Node 14
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      
      - name: 'Build and Test'
        run: |
          npm ci
          npm run build:ci

      - name: 'Cache Dist'
        uses: actions/cache@v2
        with:
          path: ./dist/propt
          key: build-dist-${{ github.run_id }}

  terraform-test:
    name: 'Terraform - Test'
    runs-on: 'ubuntu-latest'
    environment: test
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: './terraform'

    defaults:
      run:
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_wrapper: false

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var environment="test" -no-color -out tfplan

      - name: Terraform Apply
        id: Apply
        run: terraform apply -no-color -auto-approve -input=false tfplan

      - name: Call terraform output
        run: |
          STORAGE_NAME=$(terraform output storage_name)
          echo $STORAGE_NAME

      # - name: 'Terraform Output'
      #   id: terraform_outputs
      #   uses: hashicorp/terraform-github-actions@master
      #   with:
      #     tf_actions_version: latest
      #     tf_actions_subcommand: 'output'
      #     tf_actions_working_dir: '.'

      # - name: 'Use Terraform Output'
      #   run: echo ${{ steps.terraform_outputs.outputs.tf_actions_output }}

      # - name: 'Pull storage name from TF outputs'
      #   run: |
      #     apt-get install jq
      #     STORAGE_NAME=$(echo ${{ steps.terraform_outputs.outputs.tf_actions_output }} | jq -r '.storage_name.value.name')
      #     echo $STORAGE_NAME

  deploy-test:
    name: 'Deploy - Test'
    runs-on: 'ubuntu-latest'
    environment: test
    needs: [terraform-test, build-test]

    steps:
      - name: 'Cache Dist'
        id: get-dist-cache
        uses: actions/cache@v2
        with:
          path: ./dist/propt
          key: build-dist-${{ github.run_id }}

      - name: 'Check cache exists'
        if: ${{ steps.get-dist-cache.outputs.cache-hit == 'false' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Dist cache not found')

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_AD_TENANT_ID }}"}'

      - name: Upload to Blob Storage
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch --account-name ${{ env.STORAGE_NAME }} -s ./dist/propt -d '$web' --auth-mode key

  terraform-live:
    name: 'Terraform - Live'
    runs-on: 'ubuntu-latest'
    environment: live
    needs: deploy-test
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_AD_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_AD_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_AD_TENANT_ID }}
      TF_ACTIONS_WORKING_DIR: './terraform'

    defaults:
      run:
        working-directory: ${{ env.TF_ACTIONS_WORKING_DIR }}

    steps:
      - uses: actions/checkout@v2

      - uses: hashicorp/setup-terraform@v1

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend-config="resource_group_name=propt-tf-live-rg-ukso" -backend-config="storage_account_name=propttflivesaukso"

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -var environment="live" -no-color -out tfplan

      - name: Terraform Apply
        id: Apply
        run: terraform apply -no-color -auto-approve -input=false tfplan

  deploy-live:
    name: 'Deploy - Live'
    runs-on: 'ubuntu-latest'
    environment: live
    needs: terraform-live

    steps:
      - name: 'Cache Dist'
        id: get-dist-cache
        uses: actions/cache@v2
        with:
          path: ./dist/propt
          key: build-dist-${{ github.run_id }}

      - name: 'Check cache exists'
        if: ${{ steps.get-dist-cache.outputs.cache-hit == 'false' }}
        uses: actions/github-script@v3
        with:
          script: |
            core.setFailed('Dist cache not found')

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.AZURE_AD_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_AD_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_AD_TENANT_ID }}"}'

      - name: Upload to Blob Storage
        uses: azure/CLI@v1
        with:
          azcliversion: latest
          inlineScript: |
            az storage blob upload-batch --account-name proptapplivesaukso -s ./dist/propt -d '$web' --auth-mode key
